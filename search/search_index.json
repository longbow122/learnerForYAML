{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>Use the sidebar to find a specific topic to read up on, or simply get started by reading through each page! Most pages will have a small \"practise\" challenge which will make use of each lesson you were taught on that page! Feel free to have a try at them! If you don't feel like reading through the wiki, feel free to download the original learnerForYAML file. This file is a more condensed and less detailed version of the learnerForYAML wiki page, and the learnerForYAML website.</p>"},{"location":"#help","title":"Help","text":"<p>If you feel that these pages or the Learner.yml file did not help you, or you have a suggested addition to this website and the file, please contact me at my support discord: https://discord.gg/bTfSaKn I'll be happy to help you as much as I can there!</p> <p>You can also create a Github issue, and I will check over all issues on my GitHub daily.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>When reading through this website, it will be assumed that you have the following:</p> <ul> <li>Basic understanding of computer science and programming (At a 7th grade, or year 7 level)</li> <li>A Minecraft Server (You should be working for or own one, this YAML guide will be as universal as possible, but most things with be Spigot relevant).</li> <li>A text edior (Preferably somethng that has YAML capability/built-in support)</li> </ul> <p>This guide uses language that may not be understood by everybody. That is why it is assumed you have at least a semi-basic understanding of programming and computer science, if not, that's okay! Contact me (the original author of this wiki page) at my discord server or personally in my DMs. I'll help as best I can.</p> <p>It is also assumed you own or work for a Minecraft server since this was made specifically with Minecraft server administrators in mind. If not, that's okay! You should be able to understand this YAML guide just fine.</p> <p>If you don't have a text editor that doesn't have YAML capability, my personal recommendation is Notepad++. It has auto-complete, easy automatic indenting, and great find functions! For most configurators and most plugins, this will be all you need. If you want something with a little more pizzaz, Visual Studio Code is a very powerful program and will do everything Notepad++ can and more. Some plugins have also made add-ons for Visual Studio Code, which will help you configure those plugins.</p>"},{"location":"#suggestions-and-improvements","title":"Suggestions and Improvements","text":"<p>This website is always looking to expand! Do you have a suggestion or improvement you feel should be added to this website! Contact me on my discord server or make a Github issue! I will check both platforms regularly and will do my best to respond to these. If I feel your suggestion is something that is informative, and worth adding to the wiki, I will add you to the wonderful wall of contributors!</p>"},{"location":"#contributors","title":"Contributors","text":"<p>A special thanks goes out to everyone who has contributed to learnerForYAML! This website was originally written by longbow122, but the people below have helped the development of this wiki significantly! Thanks so much!</p> <p>Contributors:</p> <ul> <li>SaltyAimBOtter (Gave suggestions for certain pages)</li> <li>H1DD3NxN1NJA (Configuration file is featured in wiki)</li> <li>BadBones69 (Configuration file is featured in wiki)</li> </ul> <p>Please DO NOT contact contributors with the intent of recieving support or help with your configuration files or this guide. They have nothing to do with it. If you require support, take a read of this section.</p> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"},{"location":"comments/","title":"Comments","text":"<p>Comments! These could save your life one day, and probably have! Developers use comments in their code all the time, and they also use them quite often when writing configuration files! These comments provide explanations, examples, how-tos, anything and everything! You can also use comments for your own uses too. Most Minecraft server owners will take notes inside their configuration files using YAML comments so they can make their lives easier next time they configure things. As such, comments will clearly be very useful for everyone in the long run. It's best you learn how to use them!</p> <p>Fortunately, there's no specific way to use comments, but this part of learnerForYAML will show you how to use comments effectively. (So you don't go crazy when you don't organise comments properly). If you noticed, this guide actually uses comments quite often! In all YAML examples in this guide, they are fully explained through comments. The way to make a comment in YAML, is to use the \"#\" character. Take a look at the example below to check out a comment!</p> <p><pre><code># I'm a comment! The key below me stores a number!\nnotAComment: 56\n</code></pre> As you can see below, I've made a comment above the key \"notAComment\", which would explain what the key below it would do. When editing YAML, if using Notepad++ or Visual Studio Code, comments will be formatted differently. They'll be highlighted in a different colour, so you know what they look like. Take a look at what a comment looks like in YAML down below:</p> <p></p> <p>Not so bad, right? You can use these to make as many notes as you see fit. Just ensure you organise them properly, so you don't go insane. Here's a basic \"to-do\" and \"not-to-do\" when commenting using YAML.</p> <ul> <li>DON'T comment on the side of your values unless you know it will be small.</li> <li>DO comment above sections explaining what each one does.</li> <li>DO comment above keys explaining what they do.</li> <li>DON'T comment long-winded sentences on the side of your values.</li> </ul> <p>Ensure you follow those guidelines when commenting using YAML, and you should be fine! Take a look at a bad example of a configuration file here: <pre><code>key: 'Value' # Blah blah blah, This comment is fairly short. Right? Wrong, I'm rambling using this comment, and when looking at this comment on my screen, I'll be forced to scroll to the side. That's just too much effort! Don't do this!\nkey1: 100 #A short sentence explaining what this value does. Do this!\n\n# Separate your keys with whitespace (newlines) if needed\n# for bigger keys, or things that need a good amount of explaining\n# separate them into comments like these, so you don't end up\n# side-scrolling. Using a block of comment above a key, you will\n# know everything you need to know about the key while keeping \n# your configurations organised!\nlist1:\n- 'Hello!'\n</code></pre></p> <p>Following good comment practice is not only good for you, it's also good for the people you work with! If you work with multiple people, all working with the same configuration file from time to time, it's nice and easy for you and everyone else in your team to know what they're doing if you all follow good commenting habits. If you ever need to claim support, and you're asked to show your file so that it can be checked over, it's also very good for the people who are trying to help you. The worst thing you can do to a support staff member is to show them a terribly organised file, making their job much harder and much slower. This will not just slow down the speed at which your request for help gets answered, but it'll also annoy the people helping you. That's no fun for anyone.</p> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"},{"location":"explanationOfYAML/","title":"YAML Ain't a Markup Language!","text":"<p>Welcome to your first step in the wonderful world of YAML! My goal is to (hopefully) teach you the raw basics and essentials of YAML so that you can write YAML with ease when making a configuration file, or configuring your Spigot plugins! Let's get started.</p>"},{"location":"explanationOfYAML/#data-delicious","title":"Data. Delicious.","text":"<p>First off, we should start with why a configuration file is useful for developers and server owners in the first place. Otherwise, what would be the point in it? Config files are used to store configuration parameters, meaning initial settings for an application, or, in this case, a plugin! What this would mean is, it makes life so much easier, for developers and owners!</p> <p>For a developer, it means that they don't have to slave over their computers, scrolling through hundreds of lines of code to find that one variable value to change. They can simply find their variable in a nicely formatted file, change it, save it, and test!</p> <p>For a server owner, the advantage is so much more clear. Customisation. A configuration file allows you to change almost any value that would otherwise be hard-coded! This could mean many things for you, in a more \"Minecraft\" way of explaining things, it could allow you to change the number of crates in an event, the number of prizes in a lottery, the amount of money won from winning a minigame and so much more! Changing these values quickly and easily saves so much time, if there's one thing that everyone in this world values, it's definitely time. Thank your developers for giving you a configuration file for their plugins if you get the chance.</p>"},{"location":"explanationOfYAML/#somebody-say-formatting","title":"Somebody say formatting?","text":"<p>For me, the best part of a YAML file is definitely the syntax and formatting. Config files can be neatly arranged with comments, whitespace, lists, and more. This would make life so much easier for server owners and developers! You'll see all of this later on.</p>"},{"location":"explanationOfYAML/#so-what-does-this-mean-for-you","title":"So what does this mean for you?","text":"<p>In short, it means your life was made so much better. Developers can make their plugins with customisation in mind, write a neatly formatted config file with comments everywhere, explaining what things do, how they do them, and why! This means you can take one plugin, and completely change how it looks in a matter of seconds. You could take one plugin, configurate for a few minutes, and end up with a completely different result! Your Minecraft server just became putty in your hands.</p> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"},{"location":"sectionsAndKeys/","title":"Sections and Keys. Where are the doors?","text":"<p>Before moving further, there's something very important you should know about YAML. How it's organised. YAML is organised into two things. Sections, and keys. It is vital that you know what each one is and how each one can be useful.</p>"},{"location":"sectionsAndKeys/#sections","title":"Sections","text":"<p>Sections are what hold keys. Sections can arrange keys and will help configuration files stay neatly sorted out. Take a look down below to see what a section can do.</p> <pre><code>example: #This is a section. This will store keys!\nlongbow: 49 #This is a key!\nexample2: #This is another section, helping keep things of different categories arranged.\nbowlong: 55 #This is a key!\n</code></pre> <p>Do you see how this works? Simple, right? Developers will use this when they have configuration options that belong in two different categories. Sorting them out like this will save you a lot of time, and it means you can keep things nice and tidy. When using YAML, tidiness is always very important.</p>"},{"location":"sectionsAndKeys/#keys","title":"Keys","text":"<p>Keys are what hold values. Keys are normally what you would edit to change the value of something. If you've ever worked with any programming language before, you should know what a variable is, if not, it's worth taking a little look at my lesson on variables here. Keys hold values, and developers will assign these to certain variables to make things in their plugin work a certain way. What does this mean for server owners? It means keys, essentially hold each important configuration option in your server. An easy way to identify a key from a section is that a key will ALWAYS have a value assigned to it. If you think it's a key, but it has no value, it would be a section. And what holds keys? Sections. They all link together, all being equally important. Take a look down below to look at an example of keys: (Hint: You've already seen them!)</p> <pre><code>example: #This is a section!\nlongbow: 49 #This is a key! This would store a value for something, which you can make use of.\nmoneyOnJoin: #This is a section from a (fake) configuration file from a (fake) plugin. This plugin will give a certain amount of money to the player upon joining their server.\nmoney: 500 #This key stores the value of the money to be given. When a player joins, they'll receive $500.\n</code></pre> <p>Do you see how this works? Developers will use keys to store values which they can then access through the code in their plugin. This allows server owners to change these values and customise plugins how they want, to suit their servers.</p>"},{"location":"sectionsAndKeys/#no-seriously-where-are-the-doors","title":"No, seriously. Where are the doors?","text":"<p>Want to test what you've just learned? Take a look at the challenge below:</p> <p>Below this paragraph, I have written out a small (fake) configuration file. Can you identify which is a key and which is a section? (Hint: Keys are what hold values. Values will normally be a variable of a certain type. If a key does not have a value, then it would be a section). <pre><code>a:\nb: 46\nc: \"Hello!\"\nx: 77\ny:\n- \"Goodbye!\"\n- \"My friend! See you in another life!\"\nu:\nlongbow: \"Did you get them all?\"\n</code></pre></p> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"},{"location":"serverExamples/","title":"Minecraft-specific YAML Examples","text":"<p>This page is currently a stub. I would like to add more to this page, but I'm not sure what else to add! If you have any ideas, please contact me.</p>"},{"location":"serverExamples/#minecraft-specific-examples","title":"Minecraft-specific Examples","text":"<p>So, after all that reading, it's time you finally saw how this can be applied to your server.</p>"},{"location":"serverExamples/#example-one","title":"Example One","text":"<p>Most servers owners don't like large configuration files, as they'll normally be the ones that take the longest to configure and thus, mean more work. It's actually quite the opposite. The more configuration options you have, the more control over the plugin you get! Take a look at ChatManager's configuration file. I'll be referencing examples from this to show how large configuration files with good YAML practice can help.</p> <p>Take a look at the first section of the configuration file: <pre><code>Chat:\n\n#Block advertising in chat.\nEnable: true\n\n#Should the anti advertising checker be more sensitive? This may cause false positives.\nIncrease_Sensitivity: false\n\n#Should staff get notified when a player advertises in chat?\nNotify_Staff: true\n\n#Should a command be executed to the player that advertises?\nExecute_Command: false\n\n#The command that is executed when a player advertises.\n#Set this section to Executed_Command: '' to disable\nExecuted_Command: 'kick {player} Please do not advertise in chat'\n\n#Every time a player advertises in chat, their message will be logged in the Advertisements.txt file.\nLog_Advertisers: true\n</code></pre> The developer of this plugin has followed excellent YAML practice when writing this configuration file and has even made it nice and easy to read! Let's break this file down, to see what he's doing to help you:</p> <ul> <li>Clear, concise section and key naming. This will help you a ton due to the fact that with this simple key and section naming, you may not even need the comments to know what each option does.</li> <li>Short, informative comments. These explain what each key does in easy to read sentences. Very useful, makes choices of what to change much easier.</li> <li>Whitespacing/newlines. These simply keep everything separated. While it does mean more scrolling, it can also mean certain keys are easier to find, and comments and keys are much easier to read. Makes configuration much easier in the long run.</li> </ul> <p>When it comes to configuration files, this is a prime example of one that is easy to edit, and to read. Perfect for server owners and admins!</p>"},{"location":"serverExamples/#example-two","title":"Example Two","text":"<p>As said before, when it comes to most server owners/admins, long configuration files are the bane of their existence. Some people even quit purely because it's long and confusing. Fortunately, for SOME plugins, this is not the case. Most GUI, Command, Crate, Shop and Quest plugins will be very customisable, and as such, will have a very structured way of configuring their plugins to allow maximum customisation. Take Crazy Crates for example. When customising a crate through this plugin, you should notice that they have many options you can use. Note that word specifically, options, meaning, optional. You don't have to use ALL of them! A plugin with a similar configuration structure like CrazyCrates, will also be similar in the sense that these sections and keys can simply be removed for peace of mind. This, in turn, will make your config file so much smaller and easier to read, since there are fewer comments and sections to read and flick through. Take a look at the example below:</p> <p><pre><code>1:\n#Name of the item shown by the crate.\nDisplayName: '&amp;7&amp;lBasic Grass'\n#Item that is shown by the crate.\nDisplayItem: 'GRASS'\n#The amount that is displayed.\nDisplayAmount: 1\n#Lore will be shown in rewards GUI.\nLore:\n- '&amp;7Win some grass for your fields.'\n- '&amp;6&amp;lChance: &amp;c&amp;l40%'\n#Adds enchantments to the display item.\nDisplayEnchantments:\n- 'PROTECTION_ENVIRONMENTAL:1'\n- 'OXYGEN:1'\n#The max range that the chance will go though.\nMaxRange: 100\n#Chance of that item getting picked. It would be 40/100 chance because MaxRange is 100.\nChance: 40\n#Firework when it is won.\nFirework: false\n#Toggle if the item has a glowing effect but doesn't have an enchantment on it.\nGlowing: false\n#Set the item to 397:3 and then add the players name for this to take effect.\nPlayer: ''\n#Adds the unbreaking NBT tag to the display item to allow it to have custom textures.\nUnbreakable: false\n#When set to true, tags like Armor, Unbreakable and other tags are hidden and not visible to the user.\nHideItemFlags: false\n# Items that the player wins if this prize is picked. (If you wish not to give an Item in the prize just delete the Items Section)\n# Items: Options\n# Item:&lt;ID:MD&gt; - You can choose the item with its id and meta data.\n# Amount:&lt;Number&gt; - Choose how many of the item you get.\n# Name:&lt;Name&gt; - The display name that goes on the item.\n# Lore:&lt;Line 1&gt;,&lt;Line 2&gt;,&lt;Line 3&gt;,&lt;Line 4&gt; - The lore that will go under the enchantments. Split lines with a ','\n# Unbreakable-Item:&lt;True/False&gt; - Will add the Unbreaking NBT tag to the item to allow custom textured items to be gained through the envoys.\n# &lt;Enchantment&gt;:&lt;Level&gt; - Choose the enchantment you want to add to the item. You can use the in-game names of the enchantment if you want. Replace the spaces in the name with \"_\".\nItems:\n- 'Item:GRASS, Amount:32, Name:&amp;7&amp;lBasic Grass'\n#Commands are the commands that are run when this prize is won. (If you wish not to use a CMD in the prize just delete the Commands Section)\n#You can use %Player% to get the player that won the prize.\nCommands:\n- 'broadcast &amp;6&amp;l%Player% &amp;7has just won some Basic Grass.'\n#Messages: option allows you to send players messages and not have to pm them with commands.\n#If you do not wish to have players get messaged that they won this prize then just remove the Messages: option.\nMessages:\n- '&amp;7You just won a &amp;7&amp;lBasic Grass&amp;7.'\n#This allows for one time winnable prizes. If a player has one of the permissions then they will not be able to win it.\nBlackListed-Permissions: []\n#This allows users who have won the same prize before to get alternative prizes. They must of a BlackListed-Permission to get a alternative prize.\nAlternative-Prize:\n#Toggle if the prize will use alternative prizes for the blacklisted permission.\nToggle: false\nMessages: []\nCommands: []\nItems: []\n</code></pre> Way too much information, right? The comments, as helpful as they are, aren't actually needed, since, through one quick read-over of them and maybe a short read of the plugin wiki, you shouldn't need to use them much. So, we're going to remove those, as well as the sections and keys we don't use to condense this crate prize. This will allow us to add more prizes with less trouble due to the decreased amount of scrolling and reading. Messy file, messy server! Take a look down below for the more barebones version of this: <pre><code>1:\nDisplayName: '&amp;7&amp;lBasic Grass'\nDisplayItem: 'GRASS'\nDisplayAmount: 1\nLore:\n- '&amp;7Win some grass for your fields.'\n- '&amp;6&amp;lChance: &amp;c&amp;l40%'\nDisplayEnchantments:\n- 'PROTECTION_ENVIRONMENTAL:1'\n- 'OXYGEN:1'\nMaxRange: 100\nChance: 40\nItems:\n- 'Item:GRASS, Amount:32, Name:&amp;7&amp;lBasic Grass'\nCommands:\n- 'broadcast &amp;6&amp;l%Player% &amp;7has just won some Basic Grass.'\nMessages:\n- '&amp;7You just won a &amp;7&amp;lBasic Grass&amp;7.'\n</code></pre> See how much smaller, and easier to read this is? When coming across a plugin like this, it's always best that you remove sections and keys (maybe even comments) that you don't need. This will make your configuration files much easier to read and easier to work on. A more condensed form of prize-making such as this will allow for less scrolling and reading.</p> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"},{"location":"syntax/","title":"Syntax. Juicy.","text":"<p>Like any programming language, everything has a specific syntax, or rules you need to follow when working with YAML. This page will (hopefully) teach you all about the syntax you need to know to be able to use good YAML practice like it's second nature. Firstly, we'll be starting off with a few basic rules for working with YAML. After that, we'll be moving onto variable syntax, so that you can properly declare your variables.</p>"},{"location":"syntax/#indentation","title":"Indentation","text":"<p>Like most, if not all programming languages, indentation is very important. When copying and pasting, this is something most people will also overlook, so it's always best you manually type everything or just ensure you check your entire file over once you finish the file. When indenting, I like to follow something called the \"two-tap\" rule. It goes like this: \"The deeper you go into a section, indent by two\". Since YAML doesn't like the TAB key, you'll have to use the spacebar key for your indentation. This might sound annoying, but it won't be so bad, as long as you remember that YAML sections and keys should always be indented by a multiple of two. This sounds confusing at first, but, hopefully with a visual example, it won't be so bad. Take a look:</p> <pre><code>section: #This is a section, this won't be indented, as you don't need to indent for NEW sections. Think of these as parents.\nkey: 50 #This is a key, this was \"two-tapped\" indented in, as it is a part of this section. Think of this as the child.\nsection2: #This is a section inside a section, this was \"two-tapped\" in from the parent section, as it is still part of the original section.\nkey2: 'Hello there!' #This is a key, this was \"two-tapped\" in from its parent section, which is section2. Section2 is a child of section.\nnewSection: #This was not two-tapped into section, as it is an entirely new section. This does not need to be a child of anything.\nnewKey: 'E' #This was two-tapped into newSection, as it needs to be a child of newSection. Without this indentation, YAML wouldn't know that this was a part of newSection. You would also see a YAML error.\n</code></pre> <p>In this code, do you see where I've needed to use certain sections keys, I've indented those keys into the section it's in? I've also made a section inside a section for you to look at, to show you how the \"two-tap\" rule would properly apply. Indentation like this is very important in YAML. It can make or break your configurations and can be very hard to find in larger, chunkier files.</p>"},{"location":"syntax/#variable-syntax","title":"Variable Syntax","text":"<p>Variable what now? That's right, variables also have syntax. As you've seen in previous lessons, keys, or more specifically, their values, have certain syntax, or rules you need to follow when declaring them. In case you didn't know, declaring a variable essentially means you're telling YAML that your value is a variable of a certain type, this is important to learn, as you don't want to confuse a String for an Integer. That, in theory, would cause an error. Since there are different variable types, and each one has a different syntax, I'll be separating each one into a separate explanation.</p>"},{"location":"syntax/#strings","title":"Strings","text":"<p>There are two different ways you can declare Strings, which you'll need to know when working with Minecraft plugins. The single quote and the double quote method. We'll be going over both of these methods in this wiki, as they're likely the extent of what you need to use when configuring a Minecraft plugin. Take a look down below: <pre><code>a: 'Hello! This''l look fancy!' #This is the single quote method\nb: \"Hello! This'll look fancy!\" #This is the double quote method\n</code></pre></p> <p>As you can see, each has its differences, and both can be used in different ways. This is just a basic example of their differences, take a look down below for a more complicated example:</p> <p><pre><code>a: 'Hello! This seems to only have ''one'' way to escape characters.'\nb: \"Hello! This seems to have many patterns you can use. Even \\u263a faces!\"\n</code></pre> \"\\u263a\" is actually a smiley face! A double-quoted string can be useful in this way, as they can make use of these patterns. For a more Minecraft-specific use-case, this isn't really needed, the extent of what you'd need would be the single-quoted method of declaring Strings. However, there is one thing you simply must watch out for when using single-quoted String declarations.</p> <p><pre><code>a: 'Good day to you sir! Wasn't it last Tuesday when I saw you?' #While grammatically correct, YAML will not like this at all! You won't see most of this string printed.\nb: 'Good day to you sir! Wasn''t it not last Tuesday when I saw you?' #This will print the entire string, and will work without issues!\n</code></pre> Strange, isn't it? When using single-quoted string declarations, the character you use is actually an apostrophe. So, when using apostrophes as a part of your string, YAML may think it's the end of your string unless you SHOW YAML that the character there is actually an apostrophe. There's no way to do this other than getting around it, and that's what we call escaping.</p> <p>Escaping a character essentially means to get around something by using something else. In the case of YAML apostrophes, you'll need to use two apostrophes to have an apostrophe in your sentence. Sound confusing? Take a look below for an example: <pre><code>a: 'I''ve escaped an apostrophe!'\n</code></pre> This will print I've escaped an apostrophe! when returning that value as a String. See how that works? Now take a look at what happens if you use one apostrophe instead of two to declare your String. <pre><code>a: 'I've escaped an apostrophe!'\n</code></pre> This will either print I when returning that value as a String, or give you an error since you haven't escaped the character, and so, everything after the \"I\" will not be part of a string, and YAML will trip up. Either way, this is not the result you wanted. This is why it's important to remember to use '' when declaring an apostrophe inside a single-quoted string in YAML.</p> <p>There are also other ways to escape a string, some of these come in handy when making use of other characters that might mess with strings. One commonly used example is speech marks. <pre><code>a: \"\"What do you mean I can't speak?\"\"\n</code></pre> Something such as this might be a common use-case for servers and as such, there must be a way to ensure that you can escape speech marks too. There are two ways of going about this:</p>"},{"location":"syntax/#speech-mark-escaping-method-one","title":"Speech Mark Escaping Method One","text":"<p>One method of escaping speech marks is by making use of the single-quote method for declaring strings. Through this, you can then make use of speech marks within your string. This would work like so: <pre><code>a: '\"Hello there!\"'\n</code></pre> This would return \"Hello there!\" as a String when referenced. This is one such way you can escape speech marks. See below for the second method.</p> <p>Personally, I prefer to use single quotes for strings where possible. It tends to make things easier for me. A good rule of thumb is to use whatever works. If something works for you, don't touch it.</p>"},{"location":"syntax/#speech-mark-escaping-method-two","title":"Speech Mark Escaping Method Two","text":"<p>Another method of escaping speech marks is by making use of the backslash to escape a character. Using this, you are then able to make use of speech marks within your string. This would work like so: <pre><code>a: \"\\\"Hello there!\\\"\"\n</code></pre> This would return \"Hello there!\" as a String when referenced. This is one way through which speech marks can be escaped using Strings.</p>"},{"location":"syntax/#numbers","title":"Numbers","text":"<p>Phew! Thank god that's over. Now then, onto something a little simpler. Declaring any number is much simpler with YAML. No formatting required! Take a look at the example below: <pre><code>section:\na: 58 #Two-tapped in, as it is a part of this section! \nnewKey: 22.6 #No formatting for any of these numbers, YAML doesn't need them!\nanotherNewKey: 4545121212154546789 #Any number, any format, it'll all be detected!\n</code></pre> Declaring any number is much simpler with YAML, as you can see above. As long as your keys are indented correctly, you won't have any trouble declaring a number as a value with YAML.</p>"},{"location":"syntax/#booleans","title":"Booleans","text":"<p>Something nice and simple now, aren't you lucky! You should know, that a boolean is a \"true\" or a \"false\". Or, a \"yes\" or a \"no\". This is the simplest variable type you can use, and its flexibility is infinite. Declaring it in YAML is as easy as it is to use. Just like numbers, no formatting required! Take a look at the example below: <pre><code>boolean1: true #No formatting for any boolean, YAML doesn't need them!\nboolean2: false #No matter the boolean, it'll get detected!\n</code></pre> Declaring any boolean you want (there are only two types of boolean: true, and false!) is easy as that! The simplest declaration for the simplest variable type. Nice and easy!</p>"},{"location":"syntax/#string-lists","title":"String Lists","text":"<p>Buckle up! This one is a little harder! With String lists, while declaring them is definitely very similar to Strings, you'll have to consider that this is still a List. As such, you need to declare it as a list, of Strings. Firstly, you'd declare something as an element (a part of the list) by indenting and hyphenating. Indentation will follow the same two-tap rule you've been following this entire time, so there's nothing to remember there. Once you've indented, all you need to do is add a hyphen, and declare your String like normal. That's what we're going to do here. Take a look at the example down below. Can you see what I've done? <pre><code>stringList: #The start of the stringList. This is still a key! Don't confuse this for a section. The value it holds is the list below.\n- '1' #This is called an \"element\" of a list.\n- 'A' #You can see that when declaring a StringList item, you need to two-tap indent.\n- 'B' #Once you've two-tapped, you need to declare that this is part of the list. You'd do this by adding a hyphen.\n- 'C' #Once you've added the hyphen, you'll just declare the String like normal. Not so bad, right?\n- 'D' #You can add as many elements to a StringList as you like! \n- 'E'\n</code></pre> Not so scary now, huh? As long as you remember to indent, and hyphenate. After all of that, you just need to declare a String like normal. Not so bad.</p> <p>If you really want to, you can also use a single-lined list. However, this isn't recommended, but has been seen on the rare chance in use by developers for configuration files. These are much simpler than multi-lined lists, as you will soon see. <pre><code>list: ['Hello', 'Hi', 'What''s your name?']\n</code></pre> See what I've done here? I've listed some single-quoted Strings using commas, and after that, I've simply encased the entire list in a square bracket. This is how you'd declare and use a single-lined StringList.</p> <p>Additionally, it is also worth noting that you are able to declare an empty list of any type by simply removing all elements from the list, and using an empty set of square brackets. Take a look at the example below: <pre><code>list: []\n</code></pre></p> <p>It is also worth noting that you can declare a list of any other data type using the same logic shown above. Using this, you could make use of a list of longs, characters, integers, and more!</p>"},{"location":"syntax/#well-this-is-new","title":"Well, this is new.","text":"<p>Want to test what you've just learned? Take a look at the challenge below:</p> <p>Below this paragraph, I have written out a (fake) configuration file. Can you identify which variable is which from the name of the key and if it's declared incorrectly, can you fix it? (To make things more fun, there are even a few indentation and syntax errors in this file).</p> <pre><code>moneysection:\nmoneyonJoin: '1200' #The amount to give as a number\nShould money be given when they join the server?\nshouldGiveMoneyOnJoin:\n- 'true'\n# This will print out a message when the player joins\nmessageWhenGiven: 'Congratulations! You've won 1200 dollars!\nsoundsToPlay: #This will play sounds when the player joins\n- 'ENTITY_BLOCK_NOISE\n- 'SCREAM'\n</code></pre> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"},{"location":"variables/","title":"Varaibles. Too varied for my liking.","text":"<p>If you're running a Minecraft server, you should know what a variable is. If not, that's okay! It's time to learn! In simpler terms, a variable is something that stores a value. Variables would normally come in types, which would all be used in order to store what the program needs to store. Take a look below for a small example: <pre><code>a: 100 # a is a variable as it is holding a value. The variable type here is an Integer, which is a whole number.\n\nb: \"Hello there!\" # b is also a variable as it is holding a value. The variable type here is a String, which is what is normally used for letters, characters and text in general.\n\nc: true\n# c is also a variable as it is holding a value. The variable type here is a Boolean, which is a true or a false statement. An easier way of thinking of this would be a \"yes\" or a \"no\".\n\nd:\n- \"Hello\"\n- \"There!\"\n# d is also a variable as it is holding a value. The variable type here is a StringList, which, as you can see, is the same as a String, but many of them in a list. \n</code></pre> Both A and B are variables, as they both hold a value. If you've configured a plugin before, there's no doubt that you've already seen how useful this can be. You are able to use this to customise multiple features of your plugin, however, you should be careful that you don't mix up variable types. You'll come across many issues if you put a String where an Integer should be, for example. More on this later.</p>"},{"location":"variables/#variable-types","title":"Variable Types","text":"<p>As said before, variables come as different types, each type can be used for a different purpose, but they'll all work together in the end, in order to give you the desired result. It could be very useful for you to learn up on these the best you can, as each variable type will come in handy somewhere down the line. You've probably used them before! Take a look at some of the more commonly used YAML variables here:</p> <ul> <li>String: It's normally used in text. Letters, numbers, sentences, words, paragraphs, you name it. If it's got to do with text, it would be a form of String.</li> <li>Number: These would be used to define any number you wanted. In Java, these would be split up into multiple variables, but you don't need to know that.</li> <li>StringList: This would be the same as a String but in a list format. There are many uses for this, but the most common is where you would use it to customise your /help command.</li> <li>List: A set of variables of the same data type, stored in one location. A list of variables. Many forms of lists are derived from here, including String Lists.</li> <li>Boolean: Probably one of the simplest variables to use. It's simply a \"true\" or a \"false\"! Think of it like a \"yes\" or a \"no\". Used for virtually anything. You probably used it when ordering food at a restaurant! Booleans are used every day, everywhere.</li> </ul> <p>These are some of the more common variable types you would see when configuring your server. You won't need to identify these, but it's useful information to have, no?</p>"},{"location":"variables/#i-choose-you-wait-what-are-you","title":"I choose you! ... Wait, what are you?","text":"<p>Want to test what you've just learned? Take a look at the challenge below.</p> <p>Below this paragraph, I have written out eight different variables. It's okay if you don't know what you're looking at yet, I haven't shown you how to identify which variable is which, although, give it a try if you feel like challenging yourself!</p> <p>Identify the variables below: <pre><code>a: true\nb: \"Goodbye my friend...\"\nc: 66.2\nd:\n- \"A\"\n- \"B\"\ne: \"Huh?\"\nf: 'What''s going on here?'\ng: 75\nh: true\ni:\n- 1\n- 2\n- 3\n- 4\n</code></pre></p> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"},{"location":"yamlErrors/","title":"Errors. Too erroneous for my liking.","text":"<p>Errors! Disgusting little beasts, but helpful. Sometimes. Hopefully, you'll never need to read this page, as you should know enough to write perfect YAML with ease! But, this information, as always, is good to know for that \"just in case\" scenario. To help you learn all about YAML errors, we're going to be using a useful tool. I recommend you have this YAML validator open as we go along this lesson. Don't worry, it's completely safe.</p> <p>Take a look at the small (fake) configuration file below: <pre><code>section: #Line 1\nlore: #Line 2\n- 'Hello there!' #Line 3\n- 'What''s this?' #Line 4\n</code></pre></p> <p>Can you spot what's wrong with this file? A YAML validator sure can! A YAML validator is very useful in the case where your configuration file could be thousands of lines long. This will help you pinpoint issues with your file much quicker. Now, take a look at the YAML error that is returned when you throw this file into it: <pre><code>ERROR:\n\nwhile parsing a block collection\n  in \"&lt;unicode string&gt;\", line 3, column 5:\n    - 'Hello!'\n    ^\nexpected &lt;block end&gt;, but found '&lt;block sequence start&gt;'\n  in \"&lt;unicode string&gt;\", line 4, column 6:\n     - 'E'\n     ^\n</code></pre> This would be highlighted to you in red, normally. Confusing, right? Fortunately, there is information we can pull from this error, to be able to analyse the file itself. Firstly, we'll take a look at the bottom one first, since we know that it's already the problem line. If you count the indentations, you'll see that column 6 is after the hyphen. Looking at this line, we should be able to see that the indentation is off by one. We can fix this by simply removing one space, and lining it up with the rest of the file. Doing so will fix the error. Much bigger files will be more complicated, but a YAML error will always show you which section has the problem line at best. Using this information, you should be able to read your own YAML errors and find out where the problem lies.</p> <p>Tip: Sometimes, a YAML file may be so badly riddled with errors that, when you fix one, you end up causing five different errors. If you ever reach this stage, it may be best to start over. The number one culprit for a file reaching this stage is people copying and pasting repeated sections over and over to make life quicker for them, without paying attention to the formatting itself. Keep in mind that copying and pasting will normally mess up your formatting. If you choose to do this, it's best you do so while checking and correcting the section you've pasted in before copying and pasting again.</p> <p>Please note that some information may be wrong in this wiki, and I have done my best to ensure whatever has been written is correct. This was written in British English (with the odd oxford comma). If you believe there is a spelling, grammatical, or technical error, please contact me immediately through Discord: longbow122#1576</p>"}]}